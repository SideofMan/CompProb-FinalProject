theta[1,]
mixture_density(X[1],theta[1,])
mixture_density(X[1],theta[2,])
mixture_density(X[1],theta[3,])
source("~/.active-rstudio-document", echo=TRUE)
new_pis
new_mus
new_sigmas
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
warnings
warnings()
length(new_mus)
X
dim(p_hat[,1])
length(p_hat[,1])
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
plot(density(X))
plot(seq(-2,3,by=0.1),mixture_density(seq(-2,3,by=0.1)))
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
plot(seq(-2,3,by=0.1),mixture_density(seq(-2,3,by=0.1)))
plot(seq(-2,3,by=0.1),mixture_density(seq(-2,3,by=0.1)),theta)
plot(seq(-2,3,by=0.1),mixture_density(seq(-2,3,by=0.1),theta))
x_values = seq(-2,3,by=0.1);
mixture_density(x_values,theta)
mixture_density <- function(x,theta){
return(sum(apply(theta, 1, function(theta){theta[1]*dnorm(x, mean = theta[2], sd = theta[3])})))
}
mixture_density(x_values,theta)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
length(c_values)
length(x_values)
length(y_values)
x_values = seq(-2,3,by=0.1); y_values = apply(matrix(x_values,nrow=1), 2, function(x){mixture_density(x,theta)})
length(y_values)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
install.packages('em')
library(em)
remove.packages('em')
install.packages('mclust')
library(mclust)
Mclust(X)
# X = c(rnorm(50,0,0.5),rnorm(50,2,0.15));
X = read.csv('sim-data.csv');
X
# X = c(rnorm(50,0,0.5),rnorm(50,2,0.15));
X = read.csv('sim-data.csv')$x
X
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
hist(X,breaks=50, freq = F)
lines(x_values, y_values)
remove.packages('mclust')
hist(X,breaks=50, freq = F)
lines(x_values, y_values)
hist(X, breaks=51, freq = F)
lines(x_values, y_values)
hist(X, breaks=59, freq = F)
lines(x_values, y_values)
hist(X, breaks=51, freq = F)
lines(x_values, y_values)
hist(X, breaks=50, freq = F)
lines(x_values, y_values)
hist(X, breaks=50, freq = F)
lines(x_values, y_values)
hist(X, breaks=5, freq = F)
lines(x_values, y_values)
hist(X, breaks=50, freq = F)
lines(x_values, y_values)
hist(X, breaks=seq(min(X), max(X), length.out = 50 + 1), freq = F)
lines(x_values, y_values)
hist(X, breaks=seq(min(X), max(X), length.out = 50 + 1), freq = F)
lines(x_values, y_values); ylim(c(0,0.4))
hist(X, breaks=seq(min(X), max(X), length.out = 50 + 1), freq = F)
lines(x_values, y_values, ylim(c(0,0.4)))
hist(X, breaks=seq(min(X), max(X), length.out = 50 + 1), freq = F, ylim = c(0,0.4))
lines(x_values, y_values)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
LogLikelihood[24]
LogLikelihood[23]
LogLikelihood[24]-LogLikelihood[23]
LogLikelihood[23]-LogLikelihood[22]
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
LogLikelihood[24]-LogLikelihood[23]
LogLikelihood[23]-LogLikelihood[22]
(LogLikelihood[24]-LogLikelihood[23])/LogLikelihood[23]
(LogLikelihood[23]-LogLikelihood[22])/LogLikelihood[22]
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
length(LogLikelihood)
LogLikelihood
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
LogLikelihood
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
length(LogLikelihood)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
length(LogLikelihood)
runApp()
runApp()
runApp()
runApp()
X = read.csv('sim-data.csv')
X$x
X[,2]
X
X[,1]
runApp()
runApp()
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
y_values
pis
theta
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
theta
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
runApp()
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
theta
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
install.packages('mixtools')
library(mixtools)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
theta
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
theta
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(normalmixEM())
View(normalmixEM
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
gm$loglik
names(gm)
gm$all.loglik
gm$lambda
gm$ft
view(normalmixEM)
View(normalmixEM)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
dnorm(rnorm(4))
test=rnorm(4)
.test[1]
source("~/.active-rstudio-document", echo=TRUE)
theta
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
theta
theta$mu
theta = list(pi, mu, sigma)
theta$mu
theta$pi
theta = list(pi = pi, mu = mu, sigma = sigma)
theta$mu
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
iter
j
theta$mu[iter,j]
theta$mu
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
X
dnorm(X, mu = theta$mu[iter, j], sigma = theta$sigma[iter, j])
dnorm(X)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
length(norm(X, mean = theta$mu[iter,j], sd = theta$sigma[iter,j]))
norm(X, mean = theta$mu[iter,j], sd = theta$sigma[iter,j])
length(dnorm(X, mean = theta$mu[iter,j], sd = theta$sigma[iter,j]))
length(theta$pi[iter,j])
length(p[,j])
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
dim(p)
dim(new_pi)
length(new_pi)
dim(p.hat)
p
p.hat
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
y_values
rowSums(y_values)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
output
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
theta
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
theta
output
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
theta
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
runApp()
source("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
runApp()
runApp()
runApp()
q
runApp()
runApp()
EM_fit
m
runApp()
EM_fit
runApp()
theta$pi[iter+1,]
theta$mu[iter+1,]
new_pi
runApp()
X
theta$pi
new_pi
debugSource("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
runApp()
debugSource("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
theta$pi
new_pi
X
debugSource("C:/Users/thema/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_fast.R", echo=TRUE)
theta$pi
new_pi
runApp()
thete$pi
theta$pi
p
p.hat
runApp()
theta
runApp()
theta
runApp()
shiny::runApp()
shiny::runApp()
LogLikelihood
iter
runApp()
runApp()
runApp()
runApp()
theta
runApp()
runApp()
theta
iter
theta$pi[3,1]*dnorm(X, mean = theta$mu[3,1], sd = theta$sigma[3,1])
theta$pi[3,1]*dnorm(x, mean = theta$mu[3,1], sd = theta$sigma[3,1])
theta$pi[4,1]*dnorm(x, mean = theta$mu[4,1], sd = theta$sigma[4,1])
theta$pi[2,1]*dnorm(x, mean = theta$mu[2,1], sd = theta$sigma[2,1])
theta$pi[3,1]*dnorm(x, mean = theta$mu[3,1], sd = theta$sigma[3,1])
theta$pi[3,1]
theta$mu[3,1]
theta$sigma[3,1]
runApp()
runApp()
runApp()
runApp()
runApp()
LogLikelihood
LogLikelihood[iter]
abs((LogLikelihood[iter] - LogLikelihood[iter-1])/LogLikelihood[iter-1]) < 1e-5
runApp()
runApp()
shiny::runApp()
source("C:/Users/jdseidma/Dropbox/Computational Probability 6010/Project/EM_Algorithm/EM_testing_fast.R", echo=TRUE)
min(X)
X
runApp()
seq(from=-1,to=1,length.out=1)
seq(from=-1,to=1,length.out=2)
median(X)
X[X<median(X)]
max(X[X<median(X)])
?enorm
sd(X)
quantile(X,probs=0.5)
quantile(X,probs=0.5)[1]
quantile(X,probs=0.5)[,1]
quantile(X,probs=0.5)^2
c(quantile(X,probs=0.5))
c(quantile(X,probs=0.5), quantile(X,probs=0.5))
class(quantile(X,probs=0.5))
unname(quantile(X,probs=0.5))
(1:5)*1/5
(1:2)*1/3
test=(1:5)*1/6
test
quantile(X,test)
unname(quantile(X,test))
c(min(X), unname(quantile(X,test)), max(X))
test=(1:2)*1/3
unname(quantile(X,test))
q=(1:(3-1))*1/3
quantiles=c(unname(quantile(X,probs)), max(X))
q=(1:(3-1))*1/3
quantiles=c(unname(quantile(X,q)), max(X))
quantiles
numeric(m)
m
runApp()
runApp()
runApp()
runApp()
runApp()
h$density[which.max(h$density)]
ceil(h$density[which.max(h$density)]*10)
ceiling(h$density[which.max(h$density)]*10)
runApp()
runApp()
0.1*ceiling(10*h$density[which.max(h$density)])
runApp()
max_y
max_EM_step
max_final
max_hist
runApp()
runApp()
runApp()
x
X
max(X)
runApp()
runApp()
y_values
final
dim(x_values)
dim(theta$mu)
dim(theta$pi)
dim(theta$sigma)
runApp()
iter
runApp()
iter
runApp()
final
theta
runApp()
ncol(input_file())
max(floor(3, ncol(input_file)))
max(floor(3.2), ncol(input_file)))
max(floor(3.2), ncol(input_file))
min(floor(3.2), ncol(input_file))
floor(3.2)
ncol(input_file)
ncol(input_file())
runApp()
dgamma(3)
gamma(3)
gamma(4)
dhyper(4,4,4,4)
dhyper(4,4,4,3)
dhyper(4,4,4,100)
dhyper(4,4,4,10)
dhyper(4,4,4,8)
install.packages("Hypergeom2F1")
install.packages("BAS")
library(BAS)
test=rnorm(10)
test
var(test)
sum((test-mean(test))^2
)
sum((test-mean(test))^2)/11
var(test)
test
test-mean(test)
(test-mean(test))^2
sum((test-mean(test))^2)
sum((test-mean(test))^2)/9
var(test)
var(test)*(10-1)
matrix(rnorm(10),ncol=5)
test=matrix(rnorm(10),ncol=5)
test
test[,2:]
test[,-1]
install.packages("BayesVarSel)
install.packages("BayesVarSel")
library(BayesVarSel)
BayesVarSel::Hald
library("BAS")
library("mvtnorm")
library("abind")
library("profvis")
library("foreach")
library("doParallel")
library("abind")
library("pracma")
library("ggplot2")
library("plotly")
source("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/all_functions.R", echo=TRUE)
Hald
Hald[,1:4]
type(Hald[,1:4])
class(Hald[,1:4])
as.matrix(Hald[,1:4])
as.matrix(unname(Hald[,1:4]))
X = as.matrix(unname(Hald[,1:4]))
X
X=cbind(ones(n,1),X)
source("~/.active-rstudio-document", echo=TRUE)
X
n=dim(X)[1]; k=dim(X)[2]
k
X = as.matrix(unname(Hald[,-(1:4)]))
X
source("~/.active-rstudio-document", echo=TRUE)
Y
LinearModelML_exact(Y,X)
c(k/2, (n - 1)/2, (k + 2)/2)
source("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/all_functions.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/all_functions.R", echo=TRUE)
c(k/2, (n - 1)/2, (k + 2)/2)
LinearModelML_exact(Y,X)
debugSource("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/LinearModel_testing.R", echo=TRUE)
debugSource("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/LinearModel_testing.R", echo=TRUE)
S2
debugSource("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/Seidman R code/LinearModel_testing.R", echo=TRUE)
S2
1/S2*t(Y)%*%(diag(n) - X%*%solve(t(X)%*%X)%*%t(X))%*%Y
Q=1/S2*t(Y)%*%(diag(n) - X%*%solve(t(X)%*%X)%*%t(X))%*%Y; Q=as.numeric(Q)
output = gamma((n-1)/2)/(k*sqrt(n)*(pi*S2*Q)^((n-1)/2))*(k/(n+1))^((k-1)/2)*hypergeometric2F1(k/2,(n-1)/2,(k+2)/2,k*(1-1/Q)/(n+1))
gamma((n-1)/2)/(k*sqrt(n)*(pi*S2*Q)^((n-1)/2))*(k/(n+1))^((k-1)/2)
pnorm(0)
dnorm(0)
Gamma(2)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
10^5/60
shiny::runApp()
iter
runApp()
(750-2*1.487661)/2
runApp()
p
sum(log(rowSums(p)))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
print(s)
runApp()
print(s)
runApp()
shiny::runApp()
shiny::runApp()
